using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Xml;

namespace WADExplorer
{
    public class X3DMaterial
    {
        public string Name;

        public Color DiffuseColor = new Color(255, 255, 255, 255);
        public Color SpecularColor = new Color(255, 255, 255, 255);
        public Color EmissiveColor = new Color(0,0,0,255);
        public float AmbientIntensity = 1.0f;
        public float Shininess = 0.098f;
        public float Transparency = 0.0f;
        
        public static implicit operator X3DMaterial(Material RWmaterial)
        {
            X3DMaterial material = new X3DMaterial();
            material.DiffuseColor = new Color(
                (byte)(RWmaterial.Data.MaterialColor.R * RWmaterial.Data.Diffuse),
                (byte)(RWmaterial.Data.MaterialColor.G * RWmaterial.Data.Diffuse),
                (byte)(RWmaterial.Data.MaterialColor.B * RWmaterial.Data.Diffuse),
                255
            );
            material.SpecularColor = new Color(
                (byte)(RWmaterial.Data.MaterialColor.R * RWmaterial.Data.Specular),
                (byte)(RWmaterial.Data.MaterialColor.G * RWmaterial.Data.Specular),
                (byte)(RWmaterial.Data.MaterialColor.B * RWmaterial.Data.Specular),
                255
            );
            material.AmbientIntensity = RWmaterial.Data.Ambient;
            return material;
        }
        public static List<X3DMaterial> FromMaterialList(MaterialList RWmaterialList)
        {
            List<X3DMaterial> matList = new List<X3DMaterial>(RWmaterialList.Materials.Count);
            foreach (Material RWmaterial in RWmaterialList.Materials)
            {
                // auto convert
                matList.Add((X3DMaterial)RWmaterial);
            }
            return matList;
        }

        public X3DMaterial() { }
    }
    public class X3D : XmlDocument
    {
        public double Version = 3.0;
        public string MeshName = "Default";
        private XmlElement X3D_Main;
        private XmlElement X3D_Head;
        private XmlNode X3D_Scene;

        public List<VertexColor> VerticesColors;
        public List<Vertex> Vertices;
        public List<TexCoords> TextureCoordinates;
        public List<TriangleIndex> TriangleIndices;

        public List<X3DMaterial> Materials;

        private void Base()
        {
            this.AppendChild( this.CreateXmlDeclaration("1.0", "UTF-8", null) );
            // Main
            X3D_Main = this.CreateElement("X3D");
            X3D_Main.SetAttribute("version", $"{Version:F1}".Replace(',','.'));
            X3D_Main.SetAttribute("profile", "Immersive");

            // Head
            X3D_Head = this.CreateElement("head");
            X3D_Main.AppendChild(X3D_Head);
            XmlElement meta_Generator = this.CreateElement("meta");
            X3D_Head.AppendChild(meta_Generator);
            meta_Generator.SetAttribute("name", "generator");
            meta_Generator.SetAttribute("content", "Automatically generated by WADExplorer");
            // Scene
            X3D_Scene = this.CreateNode(XmlNodeType.Element, "Scene", null);
            X3D_Main.AppendChild(X3D_Scene);

            // add children
            this.AppendChild(X3D_Main);
        }

        /// <summary>
        /// Generates XML data from the data of this X3D
        /// </summary>
        public void Generate()
        {
            // world
            XmlElement naviInfo = this.CreateElement("NavigationInfo");
            naviInfo.SetAttribute("headlight", "true");
            naviInfo.SetAttribute("visibilityLimit", "0.0");
            naviInfo.SetAttribute("type", @"'EXAMINE', 'ANY'");
            naviInfo.SetAttribute("avatarSize", "0.25, 1.75, 0.75");
            XmlElement bg = this.CreateElement("Background");
            bg.SetAttribute("DEF", "WO_World");
            bg.SetAttribute("groundColor", "0.051 0.051 0.051");
            bg.SetAttribute("skyColor", "0.051 0.051 0.051");
            X3D_Scene.AppendChild(naviInfo); 
            X3D_Scene.AppendChild(bg);

            XmlElement meshTransform1XML = this.CreateElement("Transform");
            X3D_Scene.AppendChild(meshTransform1XML); // add to scene
            meshTransform1XML.SetAttribute("DEF", MeshName + "_TRANSFORM");

            meshTransform1XML.SetAttribute("translation", "0.000000 0.000000 0.000000");
            meshTransform1XML.SetAttribute("scale", "1.000000 1.000000 1.000000");
            meshTransform1XML.SetAttribute("rotation", "0.000000 0.000000 0.000000");

            // the rest
            XmlElement meshTransform2XML = this.CreateElement("Transform");
            meshTransform1XML.AppendChild(meshTransform2XML);

            meshTransform2XML.SetAttribute("DEF", MeshName + "_ifs_TRANSFORM");

            meshTransform2XML.SetAttribute("translation", "0.000000 0.000000 0.000000");
            meshTransform2XML.SetAttribute("scale", "1.000000 1.000000 1.000000");
            meshTransform2XML.SetAttribute("rotation", "0.000000 0.000000 0.000000");

            XmlElement meshGroupXML = this.CreateElement("Group");
            meshTransform2XML.AppendChild(meshGroupXML);

            meshGroupXML.SetAttribute("DEF", "group_ME_" + MeshName);

            int matId = 0;
            foreach(X3DMaterial mat in Materials)
            {
                XmlNode shapeNode = this.CreateElement("Shape");
                // all these are parent of 'Shape'
                meshGroupXML.AppendChild(shapeNode);
                XmlElement matNode = this.CreateElement("Appearence");
                shapeNode.AppendChild(matNode);

                matNode.SetAttribute("DEF","MA_Mat_" + matId);
                matNode.SetAttribute("diffuseColor", $"{mat.DiffuseColor.R / 255:F4} {mat.DiffuseColor.G / 255:F4} {mat.DiffuseColor.B / 255:F4}".Replace(",", "."));
                matNode.SetAttribute("specularColor", $"{mat.SpecularColor.R / 255:F4} {mat.SpecularColor.G / 255:F4} {mat.SpecularColor.B / 255:F4}".Replace(",", "."));
                matNode.SetAttribute("emissiveColor", $"{mat.EmissiveColor.R / 255:F4} {mat.EmissiveColor.G / 255:F4} {mat.EmissiveColor.B / 255:F4}".Replace(",", "."));
                matNode.SetAttribute("ambientIntensity", $"{mat.AmbientIntensity:F4}".Replace(",","."));
                matNode.SetAttribute("shininess", $"{mat.Shininess:F4}".Replace(",","."));
                matNode.SetAttribute("transparency", $"{mat.Transparency:F4}".Replace(",","."));

                XmlElement trianglesNode = this.CreateElement("IndexedTriangleSet");
                shapeNode.AppendChild(trianglesNode);

                // and these are parents of 'IndexedTriangleSet'
                XmlElement vertsNode = this.CreateElement("Coordinate");
                XmlElement uvNode = this.CreateElement("TextureCoordinate");
                XmlElement vcolorNode = this.CreateElement("Color");
                trianglesNode.AppendChild(vertsNode);
                trianglesNode.AppendChild(uvNode);
                trianglesNode.AppendChild(vcolorNode);

                // end

                trianglesNode.SetAttribute("solid", "true");
                trianglesNode.SetAttribute("normalPerVertex", "false");

                StringWriter tindices = new StringWriter();
                StringWriter vcolors = new StringWriter();
                StringWriter uv = new StringWriter();
                StringWriter verts = new StringWriter();
                foreach (TriangleIndex triangleIndex in TriangleIndices)
                {
                    if (triangleIndex.Material == matId)
                    {
                        int v1 = triangleIndex.Vert1;
                        int v2 = triangleIndex.Vert2;
                        int v3 = triangleIndex.Vert3;
                        tindices.Write(String.Format("{0} {1} {2} ",v1,v1,v3));

                        // write other data
                        vcolors.Write(String.Format("{0:F3} {1:F3} {2:F3} ", (float)VerticesColors[v1].R / 255f, (float)VerticesColors[v1].G / 255f, (float)VerticesColors[v1].B / 255f).Replace(',','.'));
                        vcolors.Write(String.Format("{0:F3} {1:F3} {2:F3} ", (float)VerticesColors[v2].R / 255f, (float)VerticesColors[v2].G / 255f, (float)VerticesColors[v2].B / 255f).Replace(',','.'));
                        vcolors.Write(String.Format("{0:F3} {1:F3} {2:F3} ", (float)VerticesColors[v3].R / 255f, (float)VerticesColors[v3].G / 255f, (float)VerticesColors[v3].B / 255f).Replace(',','.'));

                        verts.Write(String.Format("{0:F6} {1:F6} {2:F6} ", Vertices[v1].Position.X, Vertices[v1].Position.Y, Vertices[v1].Position.Z).Replace(',', '.'));
                        verts.Write(String.Format("{0:F6} {1:F6} {2:F6} ", Vertices[v2].Position.X, Vertices[v2].Position.Y, Vertices[v2].Position.Z).Replace(',', '.'));
                        verts.Write(String.Format("{0:F6} {1:F6} {2:F6} ", Vertices[v3].Position.X, Vertices[v3].Position.Y, Vertices[v3].Position.Z).Replace(',', '.'));

                        uv.Write(String.Format("{0:F6} {1:F6} ", TextureCoordinates[v1].Coords.X, TextureCoordinates[v1].Coords.Y).Replace(',','.'));
                        uv.Write(String.Format("{0:F6} {1:F6} ", TextureCoordinates[v2].Coords.X, TextureCoordinates[v2].Coords.Y).Replace(',','.'));
                        uv.Write(String.Format("{0:F6} {1:F6} ", TextureCoordinates[v3].Coords.X, TextureCoordinates[v3].Coords.Y).Replace(',','.'));
                    }
                }
                trianglesNode.SetAttribute("index", tindices.ToString());

                vcolorNode.SetAttribute("color", vcolors.ToString());
                vertsNode.SetAttribute("point", verts.ToString());
                uvNode.SetAttribute("point", uv.ToString());

                tindices.Dispose();
                vcolors.Dispose();
                uv.Dispose();
                verts.Dispose();

                matId++;
            }
        }

        /// <summary>
        /// Converts from RenderWare 3D Model to X3D
        /// </summary>
        /// <param name="dff">RenderWare 3D Model to convert from</param>
        /// <returns></returns>
        public static X3D FromDFF(DFF dff)
        {
            X3D x3D = new X3D();
            x3D.Materials = X3DMaterial.FromMaterialList(dff.Materials);
            x3D.VerticesColors = dff.VerticesColors;
            x3D.Vertices = dff.Vertices;
            x3D.TextureCoordinates = dff.TextureCoordinates;
            x3D.TriangleIndices = dff.TriangleIndices;

            return x3D;
        }
        public static implicit operator X3D(DFF dff)
        {
            return FromDFF(dff);
        }

        public X3D() { Base(); }
    }
}
